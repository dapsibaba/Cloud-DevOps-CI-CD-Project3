nodeimage: &nodeimage
  docker:
    - image: circleci/node:13.8.0
pythonalpineimage: &pythonalpineimage
  docker:
    - image: python:3.7-alpine3.11
awsimage: &awsimage
  docker:
    - image: amazon/aws-cli

version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: &parameter
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: *parameter
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/S2pNPJ8pfJRaimqA4VpNHU/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build

  build-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Ensure the "slack/notify" command is the last command in a job to accurately capture the status.
      - slack/notify:
          event: fail

  scan-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1

  deploy-infrastructure:
    <<: *awsimage
    parameters: *parameter
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar
            yum install -y gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>" \
              --parameter-overrides ID="<< parameters.workflow_id >>"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>" \
              --parameter-overrides ID="<< parameters.workflow_id >>"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:project, Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    <<: *pythonalpineimage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["45:df:88:a1:d8:8e:02:93:cb:59:37:bb:a6:de:86:a7"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add py3-pip
            pip3 install awscli 
      - attach_workspace:
          at: ~/
      - run:
          name: investigating inventory list
          command: |
            if [[ `cat ~/project/.circleci/ansible/inventory.txt | wc -l` == 2 ]]; then
              cat ~/project/.circleci/ansible/inventory.txt;
            else
              cat ~/project/.circleci/ansible/inventory.txt; exit 1
            fi
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i ~/project/.circleci/ansible/inventory.txt

      - destroy-environment

  run-migrations:
    <<: *nodeimage
    parameters: *parameter
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run migrations
          command: |
            sudo apt-get update
            sudo apt-get install -y python3
            sudo apt-get install -y python3-pip
            pip3 install --upgrade pip
            pip3 install awscli 
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if [[grep -q "has been executed successfully." migrations_dump.txt]]; then
              curl https://kvdb.io/S2pNPJ8pfJRaimqA4VpNHU/migration_<< parameters.workflow_id >>  -d '1'
            fi

      - revert-migrations   
      - destroy-environment       

  deploy-frontend:
    <<: *awsimage
    parameters: *parameter
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update
            yum install -y python3
            yum install -y npm
            yum install -y nodejs  
            yum install -y tar gzip  
            yum install -y curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:project, Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"<< parameters.workflow_id >>".tar.gz dist
            aws s3 cp dist s3://udapeople-<< parameters.workflow_id >> --recursive

      - revert-migrations

      - destroy-environment

  deploy-backend:
    <<: *pythonalpineimage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["45:df:88:a1:d8:8e:02:93:cb:59:37:bb:a6:de:86:a7"]
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible
            apk add --update npm nodejs
            apk add --update tar gzip 
            apk add --update awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      # you have to be outside a file to tar it. czvf tars everything into the backend folder
      - revert-migrations

      - destroy-environment

  smoke-test:
    docker:
      - image: alpine:latest
    parameters: *parameter
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update curl
            apk add --update npm nodejs
            apk add --update awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:project, Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test.
          command: |
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<< parameters.workflow_id >>.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1 
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations

      - destroy-environment

  cloudfront-update:
    <<: *awsimage
    parameters: *parameter
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-<< parameters.workflow_id >>" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
          context: slack_secrets
      - test-backend:
          context: slack_secrets
          requires:
            - build-backend
      - scan-backend:
          requires: [build-backend]
          context: slack_secrets
      - scan-frontend:
          requires: [build-frontend]
          context: slack_secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

      #line 356 Change this to 0 after the job fails
