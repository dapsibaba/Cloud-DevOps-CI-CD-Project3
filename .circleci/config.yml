nodeimage: &nodeimage
  docker:
    - image: cimg/node:13.8.0
pythonalpineimage: &pythonalpineimage
  docker:
    - image: python:3.7-alpine3.11
awsimage: &awsimage
  docker:
    - image: amazon/aws-cli

version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: &parameter
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: *parameter
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/S2pNPJ8pfJRaimqA4VpNHU/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if [ "$SUCCESS" -eq 1 ]; then
              echo 'success'
              cd ~/project/backend
              npm install
              npm run migrations:revert
            else
              echo "No reversion happening"
            fi
  empty-bucket:
    description: on failure empty the created s3 bucket in this workflow
    parameters: *parameter
    steps:
      - run:
          name: Empty S3 bucket 
          when: on_fail
          command: |
            echo "Emptying S3 bucket: s3://udapeople-<< parameters.workflow_id >>"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive --quiet
jobs:
  build-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build

  build-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Ensure the "slack/notify" command is the last command in a job to accurately capture the status.
      - slack/notify:
          event: fail

  scan-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1

  deploy-infrastructure:
    <<: *awsimage
    parameters: *parameter
    steps:
      - checkout
      - run:
          name: Install tar and gzip. # Workspace attachment needs tar and gzip which is not in awsimage https://www.youtube.com/watch?v=RhkaSfBlqCk 
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>" \
              --parameter-overrides ID="<< parameters.workflow_id >>"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>" \
              --parameter-overrides ID="<< parameters.workflow_id >>"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:project, Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          event: fail

      - destroy-environment

  configure-infrastructure:
    <<: *pythonalpineimage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:e3:9b:88:64:18:28:88:ad:3d:c7:21:df:22:9e:e2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 15m
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-server.yml -i inventory.txt

      - destroy-environment

  run-migrations:
    <<: *nodeimage
    parameters: *parameter
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - aws-cli/setup
      - run:
          name: Run migrations and save status into a text
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Check if migration succeeded 
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
              echo "Migration succeeded"
              # curl --insecure or curl -k
              curl -k https://kvdb.io/S2pNPJ8pfJRaimqA4VpNHU/migration_<< parameters.workflow_id >>  -d '1'
            else 
              echo "Migration failed"
            fi

      - revert-migrations
      - destroy-environment

  deploy-frontend:
    <<: *nodeimage
    parameters: *parameter
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -qq update 
            sudo apt-get install -y -qq tar gzip  
            # sudo apt-get install -y -qq curl
      - aws-cli/setup
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:project, Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"<< parameters.workflow_id >>".tar.gz dist
            aws s3 cp dist s3://udapeople-<< parameters.workflow_id >> --recursive
 
      - destroy-environment
      - revert-migrations

  deploy-backend:
    <<: *pythonalpineimage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["67:e3:9b:88:64:18:28:88:ad:3d:c7:21:df:22:9e:e2"]
      - attach_workspace:
          at: ~/          
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible
            apk add --update npm nodejs
            apk add --update tar gzip 
            # apk add curl

      - aws-cli/setup
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls
            mkdir -p ./.circleci/ansible/roles/deploy/files
            cp -r artifact.tar.gz ./.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # you have to be outside a file to tar it. czvf tars everything into the backend folder
      - destroy-environment
      - revert-migrations      

  smoke-test:
    docker:
      - image: alpine:latest
    parameters: *parameter
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update curl
            apk add --update npm nodejs
      - run:
          name: Get backend url and do backend smoke test.
          no_output_timeout: 15m
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:project, Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            sleep 60
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Backend passed smoke test"
              return 0
            else
              echo "Backend failed smoke test"
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<< parameters.workflow_id >>.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Frontend passed smoke test"
              return 0
            else
              echo "Frontend failed smoke test"
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - empty-bucket
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    <<: *awsimage
    parameters: *parameter
    steps:
      - checkout
      - run: #Workspace attachment needs tar and gzip which is not in awsimage 
          name: Install tar and gzip.
          command: |
            yum install -y tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # Fetch the old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "$OldWorkflowID" >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront-stack \
              --parameter-overrides WorkflowID="<< parameters.workflow_id >>" \
              --tags project=udapeople
            
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "Current WorkflowID: << parameters.workflow_id >>"
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      # Here's where you will add some code to rollback on failure
      - empty-bucket
      - destroy-environment
      - revert-migrations  

  cleanup:
    <<: *awsimage
    parameters: *parameter
    steps:
      - checkout
      - run: #Workspace attachment needs tar and gzip which is not in awsimage 
          name: Install tar and gzip.
          command: |
            yum install -y tar gzip      
      - attach_workspace:
          at: ~/
      - run:
          name: Fetch Oldstack Workflow ID and Remove
          command: |
            # Fetch the old workflow ID
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo "CIRCLE_WORKFLOW_ID: << parameters.workflow_id >>"  

            # Fetch the stack names      
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo "Stack names: ${STACKS[@]}" 
            
            # Ensure OldWorkflowID is not null
            if [[ "<< parameters.workflow_id >>" != "$OldWorkflowID" ]]
            then
              echo "--------------------Removing old workflow-------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "---------------------No cleanup necessary--------------------------"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
          context: slack_secrets
      - test-backend:
          context: slack_secrets
          requires:
            - build-backend
      - scan-backend:
          requires: [build-backend]
          context: slack_secrets
      - scan-frontend:
          requires: [build-frontend]
          context: slack_secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
